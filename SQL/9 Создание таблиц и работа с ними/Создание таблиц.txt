CREATE TABLE Books
(
    id     INT,
    title  VARCHAR(40),
    author VARCHAR(40)
);


CREATE TABLE IF NOT EXISTS Books
(
    id     INT,
    title  VARCHAR(40),
    author VARCHAR(40),
    price  INT
);


​CREATE TABLE Books
(
    id     INT NOT NULL,
    title  VARCHAR(40),
    author VARCHAR(40)
);


CREATE TABLE Books
(
    id     INT,
    title  VARCHAR(40) DEFAULT 'Untitled',
    author VARCHAR(40) DEFAULT 'Unknown'
);


CREATE TABLE Books
(
    id        INT,
    title     VARCHAR(40),
    author    VARCHAR(40),
    fulltitle VARCHAR(40) DEFAULT (CONCAT(title, ' by ', author))
);


CREATE TABLE Books
(
    id     INT CHECK (id > 0),
    title  VARCHAR(40),
    author VARCHAR(40)
);


create table Students
(
	id 			int,
    name 		varchar(20),
    surname 	varchar(20),
    age 		int
)



create table Students
(
	id 		int not null unique,
    name 	varchar(20) not null,
    surname varchar(20) not null,
    age 	int default 18
)



create table Students
(
	id 		int not null unique,
    name 	varchar(20) not null,
    surname varchar(20) not null,
    age 	int default 18,
    date_of_receipt date default (curdate())
)



create table Students
(
	id 				int not null unique,
    name 			varchar(20) not null check (char_length(name) > 0),
    surname 		varchar(20) not null check (char_length(surname) > 0),
    age 			int default 18 check (age >= 18),
    date_of_receipt date default (curdate()) check (date_of_receipt >= '2023-09-01')
)


create table Students
(
	id 				int not null unique,
    name 			varchar(20) not null check (char_length(name) > 0),
    surname 		varchar(20) not null check (char_length(surname) > 0),
    age 			int default 18 check (age >= 18),
    date_of_receipt date default (curdate()) check (date_of_receipt >= '2023-09-01'),
    phone_number	varchar(20) check ((phone_number like '7 (___) ___-__-__') or (phone_number like '8 (___) ___-__-__'))
)






CREATE TABLE Books
(
    id     INT PRIMARY KEY,
    title  VARCHAR(40),
    author VARCHAR(40)
)


CREATE TABLE Books
(
    title  VARCHAR(40),
    author VARCHAR(40),
    PRIMARY KEY (title, author)
);


CREATE TABLE Books
(
    id     INT PRIMARY KEY AUTO_INCREMENT,
    title  VARCHAR(40),
    author VARCHAR(40)
);



CREATE TABLE Authors
(
    id      INT PRIMARY KEY AUTO_INCREMENT,
    name    VARCHAR(40),
    surname VARCHAR(40)
);

CREATE TABLE Books
(
    id        INT PRIMARY KEY AUTO_INCREMENT,
    title     VARCHAR(40),
    author_id INT,
    FOREIGN KEY (author_id) REFERENCES Authors (id)
);


CREATE TABLE Authors
(
    id      INT PRIMARY KEY AUTO_INCREMENT,
    name    VARCHAR(40),
    surname VARCHAR(40)
);

CREATE TABLE Books
(
    id        INT PRIMARY KEY AUTO_INCREMENT,
    title     VARCHAR(40),
    author_id INT,
    FOREIGN KEY (author_id) REFERENCES Authors (id)
        ON UPDATE CASCADE
        ON DELETE CASCADE
);

INSERT INTO Authors (name, surname)
VALUES ('Stephen', 'King'),
       ('Joseph', 'Conrad');
       
INSERT INTO Books (title, author_id)
VALUES ('It', 1),
       ('Heart of Darkness', 2),
       ('Pet Sematary', 1);

UPDATE Authors
SET id = 3
WHERE id = 1;



CREATE TABLE Authors
(
    id      INT PRIMARY KEY AUTO_INCREMENT,
    name    VARCHAR(40),
    surname VARCHAR(40)
);

CREATE TABLE Books
(
    id        INT PRIMARY KEY AUTO_INCREMENT,
    title     VARCHAR(40),
    author_id INT,
    FOREIGN KEY (author_id) REFERENCES Authors (id)
        ON UPDATE SET NULL
        ON DELETE SET NULL
);

INSERT INTO Authors (name, surname)
VALUES ('Stephen', 'King'),
       ('Joseph', 'Conrad');
       
INSERT INTO Books (title, author_id)
VALUES ('It', 1),
       ('Heart of Darkness', 2),
       ('Pet Sematary', 1);

UPDATE Authors
SET id = 3
WHERE id = 1;




CREATE TABLE Authors
(
    id      INT PRIMARY KEY AUTO_INCREMENT,
    name    VARCHAR(40),
    surname VARCHAR(40)
);

CREATE TABLE Books
(
    id        INT PRIMARY KEY AUTO_INCREMENT,
    title     VARCHAR(40),
    author_id INT,
    FOREIGN KEY (author_id) REFERENCES Authors (id)
);

DESCRIBE Books;




create table Students
(
    id       int primary key auto_increment,
    name     varchar(20) check (char_length(name) > 0),
    surname  varchar(20) check (char_length(surname) > 0)
)




create table Students
(
    id       int primary key auto_increment,
    name     varchar(20) check (char_length(name) > 0),
    surname  varchar(20) check (char_length(surname) > 0)
);

create table Classes 
(
    id       int primary key auto_increment,
    name     varchar(20) check (char_length(name) > 0)
)




create table Students
(
	id 		int primary key auto_increment,
    name 	varchar(20) check (char_length(name) > 0),
    surname varchar(20) check (char_length(surname) > 0)
);

create table Classes 
(
	id 		int primary key auto_increment,
    name 	varchar(20) check (char_length(name) > 0)
);

create table Grades
(
	student_id   int,
    class_id     int,
    grade        int check (grade between 1 and 5),
    foreign key (student_id) references Students (id)
		on delete cascade
        on update cascade,
	foreign key (class_id) references Classes (id)
		on update cascade
        on delete cascade,
    primary key (student_id, class_id)
)




DROP TABLE Books;

DROP TABLE IF EXISTS Books;

RENAME TABLE <текущее имя таблицы> TO <новое имя таблицы>

RENAME TABLE Books TO OldBooks;

ALTER TABLE Books
DROP COLUMN author;

ALTER TABLE Books
RENAME COLUMN author TO writer;

ALTER TABLE Books
ADD COLUMN release_year INT CHECK (release_year > 0);

ALTER TABLE Books
ADD COLUMN release_year INT CHECK (release_year > 0) AFTER title;

ALTER TABLE Books
ADD COLUMN release_year INT NOT NULL;

ALTER TABLE Books
MODIFY COLUMN title VARCHAR(60) CHECK (title != '');

ALTER TABLE Books
ALTER COLUMN title SET DEFAULT 'Untitled';

ALTER TABLE Books
ALTER COLUMN title DROP DEFAULT;

ALTER TABLE Books
ADD PRIMARY KEY (id);

ALTER TABLE Books
DROP PRIMARY KEY;

ALTER TABLE Books
ADD COLUMN publisher VARCHAR(40);

ALTER TABLE Books
ADD FOREIGN KEY (publisher) REFERENCES Publishers (name);

ALTER TABLE Books
DROP FOREIGN KEY publisher;

ALTER TABLE Books
ADD CHECK (title != '');

ALTER TABLE Books
ADD CONSTRAINT title_is_not_empty_string CHECK (title != '');

ALTER TABLE Books
DROP CONSTRAINT title_is_not_empty_string;

ALTER TABLE Books
CHANGE COLUMN title name VARCHAR(60) CHECK (name != '');

alter table Students
rename column name to firstname,
rename column surname to lastname,
drop column age


alter table Students
add column hometown varchar(20) not null default 'New York City' after surname

alter table Students
alter column name set default '',
alter column surname set default ''

alter table Students
drop column id,
add primary key (name, surname)

alter table Math
add foreign key (student_id) references Students (id)

alter table Students
add check (char_length(name) >= 2),
add check (char_length(surname) >= 2),
add check (age > 0)



create table Studnets1
(
    id int primary key auto_increment,
    name varchar(20),
    surname varchar(20)
);

insert into Studnets1 (id, name, surname)
select id, substring_index(fullname, ' ', 1), substring_index(fullname, ' ',-1)
from Students; 

truncate Students;

alter table Students
drop column fullname,
add column name varchar(20),
add column surname varchar(20);

insert into Students
select * from Studnets1;

drop table Studnets1;

select * from Students







DELIMITER //
CREATE TRIGGER <имя триггера>
<время срабатывания триггера> <операция, которая вызывает триггер>
ON <имя таблицы>
FOR EACH ROW
BEGIN
    <тело триггера>;
END //
DELIMITER ;



SET NEW.field = 1




DELIMITER //
CREATE TRIGGER name_and_surname_formatting
BEFORE INSERT
ON Authors
FOR EACH ROW
BEGIN
    SET NEW.name = CONCAT(UPPER(LEFT(NEW.name, 1)), LOWER(SUBSTRING(NEW.name, 2)));
    SET NEW.surname= CONCAT(UPPER(LEFT(NEW.surname, 1)), LOWER(SUBSTRING(NEW.surname, 2)));
END //
DELIMITER ;

INSERT INTO Authors (name, surname) 
VALUES ('LEO', 'TOLSTOY'),
       ('william', 'shakespeare'),
       ('fYODOr', 'dOSTOYEVSKy');
       
SELECT id, name, surname
FROM Authors;





DELIMITER //
CREATE TRIGGER name_and_surname_logging
AFTER UPDATE
ON Authors
FOR EACH ROW
BEGIN
    INSERT INTO AuthorsNameHistory (author_id, old_name, old_surname, new_name, new_surname)
    VALUES (OLD.id, OLD.name, OLD.surname, NEW.name, NEW.surname);
END //
DELIMITER ;

UPDATE Authors
SET name = 'Richard',
    surname = 'Bachman'
WHERE name = 'Stephen' AND surname = 'King';
       
SELECT author_id, old_name, old_surname, new_name, new_surname
FROM AuthorsNameHistory;







delimiter //
create trigger change_date
before insert
on Posts
for each row
begin
	set new.post_date = now();
end
//
delimiter ;




delimiter //
create trigger normalize_salary
before insert
on Employees
for each row
begin
	set new.salary = case
					  when new.salary < 1000 then 1000
                      else new.salary
                      end
	;
end
//
delimiter ;




delimiter //
create trigger change_email
before update
on Users
for each row
begin
	insert into UsersEmailHistory(user_id, old_email, new_email, updated_on)
    values (new.id, old.email, new.email, current_date());
end
//
delimiter ;




delimiter //
create trigger substract_count
after insert
on Orders
for each row
begin
	update Products
    set stock = stock - new.quantity
    where Products.id = new.product_id;
end
//
delimiter ;




delimiter //
create trigger refresh_avg
after insert 
on Reviews
for each row
begin
	update Products
    set avg_rating = (select avg(rating) from Reviews where product_id = new.product_id)
    where Products.id = new.product_id;
end
//
delimiter ;




delimiter //
create trigger phone_number
before insert
on Users
for each row
begin
	set new.phone_number = case 
							when new.phone_number like '+8__________' then replace(new.phone_number, '+8', '+7')
                            when new.phone_number like '+7 ___ ___ __ __' then replace(new.phone_number, ' ', '')
                            when new.phone_number like '+8 ___ ___ __ __' then replace(replace(new.phone_number, '+8', '+7'), ' ', '')
                            else new.phone_number
                            end;
end
//

create trigger phone_number_update
before update
on Users
for each row
begin
	set new.phone_number = case 
							when new.phone_number like '+8__________' then replace(new.phone_number, '+8', '+7')
                            when new.phone_number like '+7 ___ ___ __ __' then replace(new.phone_number, ' ', '')
                            when new.phone_number like '+8 ___ ___ __ __' then replace(replace(new.phone_number, '+8', '+7'), ' ', '')
                            else new.phone_number
                            end;
end
//
delimiter ;


delimiter //
create trigger add_buy
after insert
on Purchases
for each row
begin
	update Users
    set total_spending = total_spending + (select price from Films where id = new.film_id)
    where Users.id = new.user_id;
end
//
delimiter ;






delimiter //
create trigger add_buy
after insert
on Orders
for each row
begin
	insert into Notifications(order_id, message)
    values (new.id, concat((select name from Customers where id = new.customer_id), ', new status of your delivery on ', current_date(), ': ', new.status));
end
//

create trigger refresh
after update
on Orders
for each row
begin
	update Notifications
    set message = concat((select name from Customers where id = new.customer_id), ', new status of your delivery on ', current_date(), ': ', new.status)
    where order_id = new.id;
end
//
delimiter ;


		Индексы


CREATE INDEX idx_release_year
ON Books(release_year);


​CREATE INDEX idx_author_release_year
ON Books(author, release_year);


create index idx_director
on Films(director)

alter table Films
rename index idx to idx_director


create index idx_director_release_year
on Films(director, release_year)


drop index idx_full_film_info on Films;
create index idx_full_film_info
on Films(title, director, release_year)


		Предсталвения

CREATE VIEW <имя представления> AS
<извлекающий запрос>


CREATE VIEW FirstBooks AS
SELECT *
FROM Books
LIMIT 3;

SELECT *
FROM FirstBooks;

CREATE VIEW FirstBooks AS
SELECT *
FROM Books
LIMIT 3;

CREATE OR REPLACE VIEW FirstBooks AS
SELECT *
FROM Books
LIMIT 5;

SELECT *
FROM FirstBooks;



CREATE VIEW StephenKingBooks AS
…

SELECT *
FROM StephenKingBooks
ORDER BY release_year DESC
LIMIT 1;


ALTER VIEW <имя представления> AS
<новый извлекающий запрос>


CREATE VIEW FirstBooks AS
SELECT *
FROM Books
LIMIT 3;

ALTER VIEW FirstBooks AS
SELECT *
FROM Books
LIMIT 5;

SELECT *
FROM FirstBooks;


DROP VIEW <имя представления>



create view LowStockProducts as
select name, stock
from Products
where stock < 10



create view UsersWithEmail as
select * from Users
where not isnull(email)



create view ActivePlayers as
select player_id, max(event_date) as last_login
from 
(
    select player_id, event_date
    from Activity
    where 30 > (select datediff('2024-09-01', event_date)) and 0 <= (select datediff('2024-09-01', event_date))
) as table1
group by player_id




create view AboveAverageSalaries as
select name, surname, salary
from Employees
where salary > (select avg(salary) from Employees)




CREATE VIEW BooksInfo (bookname, writer) AS
SELECT title,
       CONCAT(Authors.name, ' ', Authors.surname)
FROM Books INNER JOIN Authors ON Books.author_id = Authors.id;

SELECT *
FROM BooksInfo;




create view CategorySalesSummary as
select category, sum(price * if(isnull(quantity), 0, quantity)) as total
from Products left join Orders on Products.id = Orders.product_id
group by category




create view PopularMovies as
select title, count(*) as total_purchases
from Films inner join Purchases on Films.id = Purchases.film_id
group by title
having count(*) > 2
order by total_purchases, title



create view NoMinMaxStudents as
select group_id
from Students
group by group_id
having count(*) not in (
	(select max(total)
	from (
		select group_id, count(*) as total
		from Students
		group by group_id
	) as FirstTable),
    (select min(total)
	from (
		select group_id, count(*) as total
		from Students
		group by group_id
	) as SecondTable)
)




create view MostCommonFollowers as
select T1.user_id as user1_id, T2.user_id as user2_id
from Relations as T1 inner join Relations as T2 on T1.follower_id = T2.follower_id and T1.user_id < T2.user_id
group by T1.user_id, T2.user_id
having count(T1.follower_id) = (
	select max(total) 
	from (
		select T1.user_id as user1_id, T2.user_id as user2_id, count(T1.follower_id) as total
		from Relations as T1 inner join Relations as T2 on T1.follower_id = T2.follower_id and T1.user_id < T2.user_id
		group by T1.user_id, T2.user_id
	) as FirstTable
)




create or replace view firstView as
select product_id, year(purchase_date) as year, count(*) as total
from Orders
group by product_id, year;

create or replace view secondView as
select T1.product_id as product_id, T1.year as first_year, T1.total as first_total, T2.year as second_year, T2.total as second_total
from firstView as T1 inner join firstView as T2 on T1.product_id = T2.product_id and T1.year < T2.year and (T2.year - T1.year) = 1;

create view PopularProducts as
select distinct product_id
from secondView
where first_total > 2 and second_total > 2














WITH StephenKingBooks AS (
    SELECT title, release_year
    FROM Books INNER JOIN Authors ON Books.author_id = Authors.id
    WHERE Authors.name = 'Stephen' and Authors.surname = 'King' 
)

SELECT title
FROM StephenKingBooks
WHERE release_year = (SELECT MAX(release_year)
                      FROM StephenKingBooks);





WITH StephenKingBooks AS (
    SELECT title, release_year
    FROM Books INNER JOIN Authors ON Books.author_id = Authors.id
    WHERE Authors.name = 'Stephen' and Authors.surname = 'King' 
),
JeromeSalingerBooks AS (
    SELECT title, release_year
    FROM Books INNER JOIN Authors ON Books.author_id = Authors.id
    WHERE Authors.name = 'Jerome' and Authors.surname = 'Salinger' 
)

SELECT *
FROM StephenKingBooks

UNION 

SELECT *
FROM JeromeSalingerBooks




WITH FirstBooks (bookname, year) AS (
    SELECT title, release_year
    FROM Books
    LIMIT 3
)

SELECT *
FROM FirstBooks;








with Grades as (
select case grade
		when 'A' then 'Great'
        when 'B' then 'Great'
        when 'C' then 'Well'
        else 'Bad'
        end as letter_grade
from Math
)

select letter_grade as result, count(*) as students
from Grades
group by letter_grade




with Averages as (
	select customer_id, avg(amount) as average
    from Orders
    group by customer_id
)

select name as customer
from Averages inner join Customers on Averages.customer_id = Customers.id
where average = (select max(average) from Averages)


 with first_store as (
	select store, sum(amount)
    from Orders
    where month(order_date) = 6
    group by store
    order by sum(amount) desc
    limit 1
 ),
 second_store as (
	select store, sum(amount)
    from Orders
    where month(order_date) = 7
    group by store
    order by sum(amount) desc
    limit 1
 )
 
 select (select store from first_store) as best_in_june, (select store from second_store) as best_in_july






with Averages as (
select store, avg(amount) as average
from Orders
group by store
)

select id, Orders.store, amount, round(average, 1) as avg_for_store
from Orders inner join Averages on Orders.store = Averages.store



with Departures as (
	select departure_airport, sum(flights_count) as summa
    from Flights
    group by departure_airport
),
Arrivals as (
	select arrival_airport, sum(flights_count) as summa
    from Flights
    group by arrival_airport
),
result as (
	select departure_airport, (Departures.summa + Arrivals.summa) as summa
	from Departures inner join Arrivals on arrival_airport = departure_airport
	order by 2 desc
)

select departure_airport as airport_id
from result
where summa = (select max(summa) from result)









with max_salaries as (
	select company_id, max(salary) as max_salary
    from Salaries
    group by company_id
),
taxes as (
	select company_id, case 
						when max_salary < 1000 then 0
                        when max_salary between 1000 and 10000 then 0.24
                        else 0.49
                        end as tax
	from max_salaries
)
select employee_id as id, employee_name as name, round(salary * (1 - tax)) as salary
from (
	select Salaries.company_id, employee_id, employee_name, salary, tax
	from Salaries inner join taxes on Salaries.company_id = taxes.company_id
) as OuterTable







with Counts_table as (
	select voter, sum(if(isnull(candidate), 0, 1)) as counts
	from Votes
	group by voter
	having counts != 0
),
Score_table as (
	select voter, 1 / counts as score
	from Counts_table
)
select candidate
from (
	select candidate, score
	from Score_table inner join Votes on Score_table.voter = Votes.voter
) as Outer_table
group by candidate
order by sum(score) desc
limit 1





with Departures as (
	select id, arrival_time, 
			(
				select departure_time 
                from Buses 
                where departure_time >= Passengers.arrival_time 
                order by departure_time 
                limit 1
			) as departure_time
	from Passengers
)

select Buses.id as bus_id, count(*) as passenger_count
from Buses inner join Departures on Buses.departure_time = Departures.departure_time
group by bus_id
order by bus_id